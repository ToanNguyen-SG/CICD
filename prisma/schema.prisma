generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["debian-openssl-1.1.x"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Home {
    id        String   @id @default(uuid())
    title     String
    content   String
    image     String?
    createdAt DateTime @default(now())
}

model User {
    id        String   @id @default(uuid())
    username  String
    password  String
    role      String
    createdAt DateTime @default(now())
}

model Skills {
    id        String   @id @default(uuid())
    name      String
    parentId  String?
    createdAt DateTime @default(now())
    Media     Media[]
}

model Media {
    id        String   @id @default(uuid())
    url       String
    fileName  String
    type      String
    parentId  String
    createdAt DateTime @default(now())

    skills       Skills? @relation(fields: [parentId], references: [id])
    skillItemsId String?
}

model Project {
    id          String   @id @default(uuid())
    projectName String
    description String
    createdBy   String
    createdAt   DateTime @default(now())
}

model Service {
    id          String   @id @default(uuid())
    name        String
    parentId    String?
    description String
    createdAt   DateTime @default(now())
}

// -------------- QUOTE ----------------

model Categorys {
    id        String   @id @default(uuid())
    name      String
    code      String
    createdAt DateTime @default(now())
    post      Posts[]
}

model Posts {
    id         String     @id @default(uuid())
    title      String
    content    String
    categoryId String?
    createdAt  DateTime   @default(now())
    createdBy  String
    category   Categorys? @relation(fields: [categoryId], references: [id])
}

model CategoryQuestions {
    id        String      @id @default(uuid())
    content   String
    isDeleted Boolean     @default(false)
    createdAt DateTime    @default(now())
    Questions Questions[]
}

model Request {
    id             String           @id @default(uuid())
    name           String
    email          String
    phone          String
    company        String
    position       String
    serviceUWant   String
    isDeleted      Boolean          @default(false)
    createdAt      DateTime         @default(now())
    requestAnswers RequestAnswers[]
}

model RequestAnswers {
    id        String    @id @default(uuid())
    question  String
    answer    String
    requestId String
    isDeleted Boolean   @default(false)
    createdAt DateTime? @default(now())
    request   Request   @relation(fields: [requestId], references: [id])
}

model Questions {
    id                String            @id @default(uuid())
    content           String
    cateQuestionId    String
    type              String
    isDeleted         Boolean           @default(false)
    createdAt         DateTime          @default(now())
    answers           Answers[]
    categoryQuestions CategoryQuestions @relation(fields: [cateQuestionId], references: [id])
}

model Answers {
    id        String    @id @default(uuid())
    content   String
    isDeleted Boolean   @default(false)
    parentId  String
    createdAt DateTime  @default(now())
    question  Questions @relation(fields: [parentId], references: [id])
}

// -------------- QUOTE ----------------

// -------------- OUR ----------------
model Our {
    id             String     @id @default(uuid())
    name           String
    typeOur        String
    thumbnailImage String?
    description    String?    @db.LongText()
    isDeleted      Boolean    @default(false)
    createdAt      DateTime   @default(now())
    items          OurItems[]
}

model OurItems {
    id          String   @id @default(uuid())
    name        String
    description String?
    image       String
    isDeleted   Boolean  @default(false)
    createdAt   DateTime @default(now())
    OurServices Our      @relation(fields: [ourId], references: [id])
    ourId       String
}
